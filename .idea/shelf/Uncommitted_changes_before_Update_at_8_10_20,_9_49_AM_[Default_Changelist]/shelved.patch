Index: bootstrap_functions..py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from functools import partial\nimport pickle\nimport os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport hyperparameters as hp\nimport generate_train_functions as gt\nfrom multiprocessing import Pool\nos.environ['CUDA_VISIBLE_DEVICES'] = '-1'\n\ndef ising_bootstrap_one_trial(_, z_mat, x_y_mat, train_indices_vet, test_indices_vet,\n                              network_model_class, network_model_class_kwargs, buffer_size, batch_size, learning_rate,\n                              full_model_max_epoch, reduced_model_max_epoch):\n    # Train null network.\n    reduced_model_class_kwargs = network_model_class_kwargs.copy()\n    reduced_model_class_kwargs[\"output_dim\"] = 2\n    reduced_train_ds = tf.data.Dataset.from_tensor_slices((z_mat[train_indices_vet, :], x_y_mat[train_indices_vet, :]))\n    reduced_train_ds = reduced_train_ds.shuffle(buffer_size).batch(batch_size)\n\n    optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n    reduced_model = network_model_class(**reduced_model_class_kwargs)\n    epoch = 0\n    while epoch < reduced_model_max_epoch:\n        _ = gt.train_network(train_ds=reduced_train_ds, optimizer=optimizer, network_model=reduced_model)\n        epoch += 1\n\n    # Resample\n    fitted_par_mat = reduced_model(z_mat[train_indices_vet, :])\n    fitted_train_p_mat = gt.pmf_collection(fitted_par_mat)\n    new_train_x_y_mat = gt.generate_x_y_mat(fitted_train_p_mat)\n    train_ds = tf.data.Dataset.from_tensor_slices((z_mat[train_indices_vet, :], new_train_x_y_mat))\n    train_ds = train_ds.shuffle(buffer_size).batch(batch_size)\n\n    # Train the network\n    network_model = network_model_class(**network_model_class_kwargs)\n    epoch = 0\n    while epoch < full_model_max_epoch:\n        _ = gt.train_network(train_ds=train_ds, optimizer=optimizer, network_model=network_model)\n        epoch += 1\n\n    predicted_parameter_mat = network_model(z_mat)\n    jxy_squared_vet = np.square(predicted_parameter_mat[:, 2])\n    result_dict = {\"train_test_statistic\": np.mean(jxy_squared_vet[train_indices_vet]),\n                   \"test_test_statistic\": np.mean(jxy_squared_vet[test_indices_vet])}\n\n    return result_dict\n\n\ndef ising_bootstrap_method(pool, trial_index, sample_size, scenario, data_directory_name,\n                           ising_simulation_result_dict_name, network_model_class, network_model_class_kwargs,\n                           number_of_bootstrap_samples, full_model_max_epoch, reduced_model_max_epoch,\n                           batch_size=hp.batch_size, buffer_size=hp.buffer_size,\n                           learning_rate=hp.learning_rate):\n    with open(f'results/result_dict/{data_directory_name}/{ising_simulation_result_dict_name}_{scenario}_result_'\n              f'dict.p', 'rb') as fp:\n        ising_simulation_loop_result_dict = pickle.load(fp)\n\n    z_mat = np.loadtxt(f\"./data/{data_directory_name}/z_mat/z_mat_{sample_size}_{trial_index}.txt\", dtype=np.float32)\n    x_y_mat = np.loadtxt(f\"./data/{data_directory_name}/{scenario}/x_y_mat_{sample_size}_{trial_index}.txt\",\n                         dtype=np.float32)\n    train_indices_vet = ising_simulation_loop_result_dict[sample_size][trial_index][\"train_indices_vet\"]\n    test_indices_vet = ising_simulation_loop_result_dict[sample_size][trial_index][\"test_indices_vet\"]\n    train_test_statistic = ising_simulation_loop_result_dict[sample_size][trial_index][\"train_test_statistic\"]\n    test_test_statistic = ising_simulation_loop_result_dict[sample_size][trial_index][\"test_test_statistic\"]\n\n    bootstrap_test_statistic_dict_vet = pool.map(partial(ising_bootstrap_one_trial,\n                                                         z_mat=z_mat, train_indices_vet=train_indices_vet,\n                                                         test_indices_vet=test_indices_vet,\n                                                         network_model_class=network_model_class,\n                                                         network_model_class_kwargs=network_model_class_kwargs,\n                                                         buffer_size=buffer_size, batch_size=batch_size,\n                                                         learning_rate=learning_rate, x_y_mat=x_y_mat,\n                                                         full_model_max_epoch=full_model_max_epoch,\n                                                         reduced_model_max_epoch=reduced_model_max_epoch),\n                                                 np.arange(number_of_bootstrap_samples))\n    train_test_statistic_vet = np.zeros(number_of_bootstrap_samples)\n    test_test_statistic_vet = np.zeros(number_of_bootstrap_samples)\n    for i, trial_dict in enumerate(bootstrap_test_statistic_dict_vet):\n        train_test_statistic_vet[i] = trial_dict[\"train_test_statistic\"]\n        test_test_statistic_vet[i] = trial_dict[\"test_test_statistic\"]\n\n    train_p_value = sum(train_test_statistic_vet > train_test_statistic) / number_of_bootstrap_samples\n    test_p_value = sum(test_test_statistic_vet > test_test_statistic) / number_of_bootstrap_samples\n    result_dict = {\"train_p_value\": train_p_value, \"test_p_value\": test_p_value,\n                   \"train_test_statistic_vet\": train_test_statistic_vet,\n                   \"test_test_statistic_vet\":  test_test_statistic_vet}\n\n    return result_dict\n\n\ndef ising_bootstrap_loop(pool, scenario, data_directory_name, ising_simulation_result_dict_name, result_dict_name,\n                         trial_index_vet, network_model_class,\n                         network_model_class_kwargs_vet, number_of_bootstrap_samples, full_model_max_epoch_vet,\n                         reduced_model_max_epoch_vet,\n                         learning_rate=hp.learning_rate, buffer_size=hp.buffer_size, batch_size=hp.batch_size,\n                         sample_size_vet=hp.sample_size_vet):\n    result_dict = {}\n    for sample_size, network_model_class_kwargs, \\\n        full_model_max_epoch, reduced_model_max_epoch in zip(sample_size_vet, network_model_class_kwargs_vet,\n                                                             full_model_max_epoch_vet, reduced_model_max_epoch_vet):\n        sample_size_result_dict = {}\n        for trial_index in trial_index_vet:\n            trial_result_dict = \\\n                ising_bootstrap_method(pool=pool, trial_index=trial_index, sample_size=sample_size, scenario=scenario,\n                                       data_directory_name=data_directory_name,\n                                       ising_simulation_result_dict_name=ising_simulation_result_dict_name,\n                                       network_model_class=network_model_class,\n                                       network_model_class_kwargs=network_model_class_kwargs,\n                                       number_of_bootstrap_samples=number_of_bootstrap_samples,\n                                       full_model_max_epoch=full_model_max_epoch,\n                                       reduced_model_max_epoch=reduced_model_max_epoch,\n                                       batch_size=batch_size, buffer_size=buffer_size, learning_rate=learning_rate)\n            sample_size_result_dict[trial_index] = trial_result_dict\n            print(f\"Bootstrap, data: {data_directory_name}, scenario: {scenario}, sample_size: {sample_size}, \"\n                  f\"trial_index: {trial_index} finished.\")\n            print(f\"Train P-value is {trial_result_dict['train_p_value']}\")\n            print(f\"Test P-value is {trial_result_dict['test_p_value']}\")\n\n        result_dict[sample_size] = sample_size_result_dict\n\n    with open(f\"./results/result_dict/{data_directory_name}/{result_dict_name}_{scenario}_result_dict.p\", \"wb\") as fp:\n        pickle.dump(result_dict, fp, protocol=pickle.HIGHEST_PROTOCOL)\n\n\npool = Pool()\nising_network_model_class_kwargs = {\"number_forward_layers\": 1,\n                                      \"input_dim\": hp.dim_z, \"hidden_dim\": hp.hidden_1_out_dim, \"output_dim\": 3}\nising_network_model_class_kwargs_vet = [ising_network_model_class_kwargs for _ in range(len(hp.sample_size_vet))]\n\nising_bootstrap_loop(pool=pool, scenario=\"null\", data_directory_name=\"ising_data\",\n                     ising_simulation_result_dict_name=\"ising_data_true_architecture\",\n                     result_dict_name=\"bootstrap_refit_reduced_true_architecture_500_1000\",\n                     trial_index_vet=np.arange(5), network_model_class=gt.FullyConnectedNetwork,\n                     network_model_class_kwargs_vet=ising_network_model_class_kwargs_vet,\n                     number_of_bootstrap_samples=hp.number_of_boostrap_samples,\n                     full_model_max_epoch_vet=hp.ising_epoch_vet[2:4],\n                     reduced_model_max_epoch_vet=hp.ising_epoch_vet[2:4],\n                     sample_size_vet=hp.sample_size_vet[2:4])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmixture_result_dict_name = f\"mixture_data_{hp.mixture_number_forward_layer}_{hp.mixture_hidden_dim}\"\nmixture_network_model_class_kwargs = {\"number_forward_layers\": hp.mixture_number_forward_layer,\n                                      \"input_dim\": hp.dim_z, \"hidden_dim\": hp.mixture_hidden_dim, \"output_dim\": 3}\nmixture_network_model_class_kwargs_vet = [mixture_network_model_class_kwargs for _ in range(len(hp.sample_size_vet))]\n\n# test = ising_bootstrap_method(pool=pool, trial_index=0, sample_size=50, scenario=\"null\",\n#                               data_directory_name=\"mixture_data\",\n#                               ising_simulation_result_dict_name=mixture_result_dict_name,\n#                               network_model_class=gt.FullyConnectedNetwork,\n#                               network_model_class_kwargs=mixture_network_model_class_kwargs,\n#                               number_of_bootstrap_samples=2, full_model_max_epoch=1,\n#                               reduced_model_max_epoch=1)\n\nising_bootstrap_loop(pool=pool, scenario=\"null\", data_directory_name=\"mixture_data\",\n                     ising_simulation_result_dict_name=mixture_result_dict_name,\n                     result_dict_name=\"bootstrap_refit_reduced_mixture_50_100\",\n                     trial_index_vet=np.arange(100), network_model_class=gt.FullyConnectedNetwork,\n                     network_model_class_kwargs_vet=mixture_network_model_class_kwargs_vet,\n                     number_of_bootstrap_samples=hp.number_of_boostrap_samples,\n                     full_model_max_epoch_vet=hp.mixture_epoch_vet[0:2],\n                     reduced_model_max_epoch_vet=hp.reduced_model_epoch_vet[0:2],\n                     sample_size_vet=hp.sample_size_vet[0:2])\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bootstrap_functions..py	(revision ba74f0fad6d26acdaab2003563a978fc9c9c7611)
+++ bootstrap_functions..py	(date 1597039558133)
@@ -130,7 +130,7 @@
 
 ising_bootstrap_loop(pool=pool, scenario="null", data_directory_name="ising_data",
                      ising_simulation_result_dict_name="ising_data_true_architecture",
-                     result_dict_name="bootstrap_refit_reduced_true_architecture_500_1000",
+                     result_dict_name="bootstrap_refit_reduced_true_architecture_500_100",
                      trial_index_vet=np.arange(5), network_model_class=gt.FullyConnectedNetwork,
                      network_model_class_kwargs_vet=ising_network_model_class_kwargs_vet,
                      number_of_bootstrap_samples=hp.number_of_boostrap_samples,
